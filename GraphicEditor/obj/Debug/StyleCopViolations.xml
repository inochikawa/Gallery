<StyleCopViolations>
  <Violation Section="Root.GraphicEditor.Model.GraphicContentStatePattern.BrushToolSelected.dropShadowEffect" LineNumber="72" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\BrushToolSelected.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="SingleLineCommentMustBePrecededByBlankLine" RuleId="SA1515">A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Violation>
  <Violation LineNumber="22" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\GraphicContent.cs" RuleNamespace="StyleCop.CSharp.DocumentationRules" Rule="DocumentationHeadersMustNotContainBlankLines" RuleId="SA1644">The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Violation>
  <Violation LineNumber="24" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\GraphicContent.cs" RuleNamespace="StyleCop.CSharp.DocumentationRules" Rule="ElementDocumentationMustHaveSummaryText" RuleId="SA1606">The summary section in the documentation header must not be empty.</Violation>
  <Violation LineNumber="35" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\GraphicContent.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="SingleLineCommentMustBePrecededByBlankLine" RuleId="SA1515">A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Violation>
  <Violation LineNumber="37" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\GraphicContent.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="SingleLineCommentMustBePrecededByBlankLine" RuleId="SA1515">A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Violation>
  <Violation LineNumber="78" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\GraphicContent.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="SingleLineCommentMustBePrecededByBlankLine" RuleId="SA1515">A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Violation>
  <Violation LineNumber="103" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\GraphicContent.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all public methods.</Violation>
  <Violation LineNumber="108" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\GraphicContent.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all public methods.</Violation>
  <Violation LineNumber="103" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\GraphicContent.cs" RuleNamespace="StyleCop.CSharp.DocumentationRules" Rule="ElementReturnValueDocumentationMustHaveText" RuleId="SA1616">The returns section in the documentation header must not be empty.</Violation>
  <Violation LineNumber="31" StartLine="31" StartColumn="29" EndLine="31" EndColumn="42" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\LineToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to GraphicContent should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="25" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\LineToolSelected.cs" RuleNamespace="StyleCop.CSharp.SpacingRules" Rule="SymbolsMustBeSpacedCorrectly" RuleId="SA1003">The spacing around the symbol ':' is invalid.</Violation>
  <Violation LineNumber="40" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\LineToolSelected.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="SingleLineCommentMustBePrecededByBlankLine" RuleId="SA1515">A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Violation>
  <Violation LineNumber="44" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\LineToolSelected.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="SingleLineCommentMustBePrecededByBlankLine" RuleId="SA1515">A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Violation>
  <Violation LineNumber="47" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\LineToolSelected.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="SingleLineCommentMustBePrecededByBlankLine" RuleId="SA1515">A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Violation>
  <Violation LineNumber="62" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\LineToolSelected.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="SingleLineCommentMustBePrecededByBlankLine" RuleId="SA1515">A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Violation>
  <Violation LineNumber="14" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\NoToolSelected.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="OpeningCurlyBracketsMustNotBeFollowedByBlankLine" RuleId="SA1505">An opening curly bracket must not be followed by a blank line.</Violation>
  <Violation LineNumber="16" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\NoToolSelected.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="ClosingCurlyBracketsMustNotBePrecededByBlankLine" RuleId="SA1508">A closing curly bracket must not be preceded by a blank line.</Violation>
  <Violation LineNumber="15" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="OpeningCurlyBracketsMustNotBeFollowedByBlankLine" RuleId="SA1505">An opening curly bracket must not be followed by a blank line.</Violation>
  <Violation LineNumber="17" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="ClosingCurlyBracketsMustNotBePrecededByBlankLine" RuleId="SA1508">A closing curly bracket must not be preceded by a blank line.</Violation>
  <Violation LineNumber="31" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="SplitParametersMustStartOnLineAfterDeclaration" RuleId="SA1116">If the method parameters are on separate lines, the first parameter must begin on the line beneath the name of the method.</Violation>
  <Violation LineNumber="27" StartLine="27" StartColumn="23" EndLine="27" EndColumn="36" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to GraphicContent should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="27" StartLine="27" StartColumn="70" EndLine="27" EndColumn="83" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to GraphicContent should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="31" StartLine="31" StartColumn="37" EndLine="31" EndColumn="50" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to GraphicContent should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="31" StartLine="31" StartColumn="83" EndLine="31" EndColumn="96" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to GraphicContent should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="32" StartLine="32" StartColumn="27" EndLine="32" EndColumn="40" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to GraphicContent should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="32" StartLine="32" StartColumn="73" EndLine="32" EndColumn="86" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to GraphicContent should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="29" StartLine="29" StartColumn="67" EndLine="29" EndColumn="80" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to GraphicContent should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="43" StartLine="43" StartColumn="33" EndLine="43" EndColumn="46" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to GraphicContent should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="44" StartLine="44" StartColumn="34" EndLine="44" EndColumn="47" Source="D:\GitHub\Gallery\GraphicEditor\Model\GraphicContentStatePattern\PointerToolSelected.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to GraphicContent should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="31" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all constructors.</Violation>
  <Violation LineNumber="37" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all delegates.</Violation>
  <Violation LineNumber="39" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all events.</Violation>
  <Violation LineNumber="41" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all events.</Violation>
  <Violation LineNumber="43" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all public methods.</Violation>
  <Violation LineNumber="49" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="51" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="53" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="55" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all public methods.</Violation>
  <Violation LineNumber="66" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all public methods.</Violation>
  <Violation LineNumber="114" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all internal methods.</Violation>
  <Violation LineNumber="119" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all internal methods.</Violation>
  <Violation LineNumber="124" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all public methods.</Violation>
  <Violation LineNumber="130" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all public methods.</Violation>
  <Violation LineNumber="32" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.SpacingRules" Rule="SymbolsMustBeSpacedCorrectly" RuleId="SA1003">The spacing around the symbol ':' is invalid.</Violation>
  <Violation LineNumber="127" StartLine="127" StartColumn="19" EndLine="127" EndColumn="25" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to Opacity should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="133" StartLine="133" StartColumn="19" EndLine="133" EndColumn="25" Source="D:\GitHub\Gallery\GraphicEditor\Model\Layer.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="DoNotPrefixCallsWithBaseUnlessLocalImplementationExists" RuleId="SA1100">The call to Opacity should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</Violation>
  <Violation LineNumber="6" StartLine="6" StartColumn="31" EndLine="6" EndColumn="31" Source="D:\GitHub\Gallery\GraphicEditor\Model\RelayCommand.cs" RuleNamespace="StyleCop.CSharp.SpacingRules" Rule="SymbolsMustBeSpacedCorrectly" RuleId="SA1003">The spacing around the symbol ':' is invalid.</Violation>
  <Violation LineNumber="14" Source="D:\GitHub\Gallery\GraphicEditor\Model\RelayCommand.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All events must be placed after all constructors.</Violation>
  <Violation LineNumber="19" Source="D:\GitHub\Gallery\GraphicEditor\Model\RelayCommand.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All events must be placed after all constructors.</Violation>
  <Violation LineNumber="35" Source="D:\GitHub\Gallery\GraphicEditor\Model\RelayCommand.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private events must be placed after all public events.</Violation>
  <Violation LineNumber="65" StartLine="65" StartColumn="18" EndLine="65" EndColumn="103" Source="D:\GitHub\Gallery\GraphicEditor\Model\RelayCommand.cs" RuleNamespace="StyleCop.CSharp.SpacingRules" Rule="SingleLineCommentsMustBeginWithSingleSpace" RuleId="SA1005">The comment must start with a single space. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Violation>
  <Violation LineNumber="3" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="SystemUsingDirectivesMustBePlacedBeforeOtherUsingDirectives" RuleId="SA1208">System using directives must be placed before all other using directives.</Violation>
  <Violation LineNumber="29" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all delegates.</Violation>
  <Violation LineNumber="30" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all delegates.</Violation>
  <Violation LineNumber="32" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all events.</Violation>
  <Violation LineNumber="33" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all events.</Violation>
  <Violation LineNumber="34" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all events.</Violation>
  <Violation LineNumber="35" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all events.</Violation>
  <Violation LineNumber="52" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="53" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="54" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="56" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="25" StartLine="25" StartColumn="14" EndLine="25" EndColumn="15" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.SpacingRules" Rule="KeywordsMustBeSpacedCorrectly" RuleId="SA1000">The spacing around the keyword 'if' is invalid.</Violation>
  <Violation LineNumber="69" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all public methods.</Violation>
  <Violation LineNumber="82" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\LayersWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private methods must be placed after all public methods.</Violation>
  <Violation LineNumber="7" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\MainWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="SystemUsingDirectivesMustBePlacedBeforeOtherUsingDirectives" RuleId="SA1208">System using directives must be placed before all other using directives.</Violation>
  <Violation LineNumber="43" StartLine="43" StartColumn="53" EndLine="43" EndColumn="81" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\MainWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.MaintainabilityRules" Rule="StatementMustNotUseUnnecessaryParenthesis" RuleId="SA1119">The line contains unnecessary parenthesis.</Violation>
  <Violation LineNumber="74" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\MainWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="82" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\MainWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="94" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\MainWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="106" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\MainWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="118" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\MainWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all properties.</Violation>
  <Violation LineNumber="146" StartLine="146" StartColumn="55" EndLine="146" EndColumn="55" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\MainWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.SpacingRules" Rule="SymbolsMustBeSpacedCorrectly" RuleId="SA1003">The spacing around the symbol '=' is invalid.</Violation>
  <Violation LineNumber="146" Source="D:\GitHub\Gallery\GraphicEditor\ViewModel\MainWindowViewModel.cs" RuleNamespace="StyleCop.CSharp.SpacingRules" Rule="SymbolsMustBeSpacedCorrectly" RuleId="SA1003">The spacing around the symbol '=' is invalid.</Violation>
  <Violation LineNumber="9" Source="D:\GitHub\Gallery\GraphicEditor\View\Styles\FlatInnerWindow.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All internal classes must be placed after all public classes.</Violation>
  <Violation LineNumber="24" Source="D:\GitHub\Gallery\GraphicEditor\View\Styles\FlatInnerWindow.cs" RuleNamespace="StyleCop.CSharp.DocumentationRules" Rule="PartialElementsMustBeDocumented" RuleId="SA1601">The partial class element must have a documentation header containing either a summary tag or a content tag.</Violation>
  <Violation LineNumber="24" Source="D:\GitHub\Gallery\GraphicEditor\View\Styles\FlatInnerWindow.cs" RuleNamespace="StyleCop.CSharp.MaintainabilityRules" Rule="FileMayOnlyContainASingleClass" RuleId="SA1402">A C# document may only contain a single class at the root level unless all of the classes are partial and are of the same type.</Violation>
  <Violation LineNumber="26" Source="D:\GitHub\Gallery\GraphicEditor\View\Styles\FlatInnerWindow.cs" RuleNamespace="StyleCop.CSharp.MaintainabilityRules" Rule="AccessModifierMustBeDeclared" RuleId="SA1400">The method must have an access modifier.</Violation>
  <Violation LineNumber="38" Source="D:\GitHub\Gallery\GraphicEditor\View\Styles\FlatInnerWindow.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All methods must be placed after all fields.</Violation>
  <Violation LineNumber="31" Source="D:\GitHub\Gallery\GraphicEditor\View\Styles\FlatInnerWindow.cs" RuleNamespace="StyleCop.CSharp.MaintainabilityRules" Rule="AccessModifierMustBeDeclared" RuleId="SA1400">The method must have an access modifier.</Violation>
  <Violation LineNumber="38" Source="D:\GitHub\Gallery\GraphicEditor\View\Styles\FlatInnerWindow.cs" RuleNamespace="StyleCop.CSharp.MaintainabilityRules" Rule="AccessModifierMustBeDeclared" RuleId="SA1400">The field must have an access modifier.</Violation>
  <Violation LineNumber="54" Source="D:\GitHub\Gallery\GraphicEditor\View\Styles\FlatInnerWindow.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="CodeMustNotContainEmptyStatements" RuleId="SA1106">The code contains an extra semicolon.</Violation>
  <Violation LineNumber="54" StartLine="54" StartColumn="43" EndLine="54" EndColumn="43" Source="D:\GitHub\Gallery\GraphicEditor\View\Styles\FlatInnerWindow.cs" RuleNamespace="StyleCop.CSharp.SpacingRules" Rule="SemicolonsMustBeSpacedCorrectly" RuleId="SA1002">Invalid spacing around the semicolon.</Violation>
  <Violation LineNumber="2" Source="D:\GitHub\Gallery\GraphicEditor\View\UserControls\LayersControl\LayerItem.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="SystemUsingDirectivesMustBePlacedBeforeOtherUsingDirectives" RuleId="SA1208">System using directives must be placed before all other using directives.</Violation>
  <Violation LineNumber="75" Source="D:\GitHub\Gallery\GraphicEditor\View\UserControls\LayersControl\LayerItem.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustBeOrderedByAccess" RuleId="SA1202">All private fields must be placed after all public fields.</Violation>
  <Violation LineNumber="69" Source="D:\GitHub\Gallery\GraphicEditor\View\UserControls\LayersControl\LayerItem.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All properties must be placed after all delegates.</Violation>
  <Violation LineNumber="71" Source="D:\GitHub\Gallery\GraphicEditor\View\UserControls\LayersControl\LayerItem.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All properties must be placed after all events.</Violation>
  <Violation LineNumber="73" Source="D:\GitHub\Gallery\GraphicEditor\View\UserControls\LayersControl\LayerItem.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All properties must be placed after all events.</Violation>
  <Violation LineNumber="80" Source="D:\GitHub\Gallery\GraphicEditor\View\UserControls\LayersControl\LayerItem.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="ElementsMustAppearInTheCorrectOrder" RuleId="SA1201">All properties must be placed after all events.</Violation>
  <Violation LineNumber="76" Source="D:\GitHub\Gallery\GraphicEditor\View\UserControls\LayersControl\LayerItem.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="ParametersMustBeOnSameLineOrSeparateLines" RuleId="SA1117">All field parameters must be placed on the same line, or each parameter must be placed on a separate line.</Violation>
  <Violation LineNumber="76" Source="D:\GitHub\Gallery\GraphicEditor\View\UserControls\LayersControl\LayerItem.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="SplitParametersMustStartOnLineAfterDeclaration" RuleId="SA1116">If the field parameters are on separate lines, the first parameter must begin on the line beneath the name of the field.</Violation>
  <Violation LineNumber="76" Source="D:\GitHub\Gallery\GraphicEditor\View\UserControls\LayersControl\LayerItem.cs" RuleNamespace="StyleCop.CSharp.ReadabilityRules" Rule="ParameterMustFollowComma" RuleId="SA1115">The parameter must begin on the line after the previous parameter.</Violation>
  <Violation LineNumber="102" StartLine="102" StartColumn="14" EndLine="102" EndColumn="15" Source="D:\GitHub\Gallery\GraphicEditor\View\UserControls\LayersControl\LayerItem.cs" RuleNamespace="StyleCop.CSharp.SpacingRules" Rule="KeywordsMustBeSpacedCorrectly" RuleId="SA1000">The spacing around the keyword 'if' is invalid.</Violation>
  <Violation LineNumber="2" Source="D:\GitHub\Gallery\GraphicEditor\View\Windows\LayersWindow.xaml.cs" RuleNamespace="StyleCop.CSharp.OrderingRules" Rule="SystemUsingDirectivesMustBePlacedBeforeOtherUsingDirectives" RuleId="SA1208">System using directives must be placed before all other using directives.</Violation>
  <Violation LineNumber="21" Source="D:\GitHub\Gallery\GraphicEditor\View\Windows\LayersWindow.xaml.cs" RuleNamespace="StyleCop.CSharp.DocumentationRules" Rule="ElementDocumentationMustBeSpelledCorrectly" RuleId="SA1650">The documentation text within the summary tag contains incorrectly spelled words: xaml</Violation>
  <Violation LineNumber="48" Source="D:\GitHub\Gallery\GraphicEditor\View\Windows\MainWindow.xaml.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="OpeningCurlyBracketsMustNotBeFollowedByBlankLine" RuleId="SA1505">An opening curly bracket must not be followed by a blank line.</Violation>
  <Violation LineNumber="50" Source="D:\GitHub\Gallery\GraphicEditor\View\Windows\MainWindow.xaml.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="ClosingCurlyBracketsMustNotBePrecededByBlankLine" RuleId="SA1508">A closing curly bracket must not be preceded by a blank line.</Violation>
  <Violation LineNumber="53" Source="D:\GitHub\Gallery\GraphicEditor\View\Windows\MainWindow.xaml.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="OpeningCurlyBracketsMustNotBeFollowedByBlankLine" RuleId="SA1505">An opening curly bracket must not be followed by a blank line.</Violation>
  <Violation LineNumber="55" Source="D:\GitHub\Gallery\GraphicEditor\View\Windows\MainWindow.xaml.cs" RuleNamespace="StyleCop.CSharp.LayoutRules" Rule="ClosingCurlyBracketsMustNotBePrecededByBlankLine" RuleId="SA1508">A closing curly bracket must not be preceded by a blank line.</Violation>
</StyleCopViolations>